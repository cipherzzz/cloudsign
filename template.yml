AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Environment:
    Type: String
    Description: Environment to deploy resources to
    AllowedValues:
      - staging
      - production

Conditions:
  IsProduction: !Equals [ !Ref Environment, production ]

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 5

Resources:
  MessageEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'message-events-${Environment}'
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: project
          Value: my-project
        - Key: environment
          Value: !Ref Environment
  
  PutMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'messages-${Environment}'
      CodeUri: ./src/messages/
      Handler: index.handler
      AutoPublishAlias: !Ref Environment    
      Environment:
        Variables:
          TABLE: !Ref MessagesTable
      Tags:
        project: my-project
        environment: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - SQSPollerPolicy:
            QueueName: !Ref MessageEventsQueue
        - KMSEncryptPolicy:
            KeyId: !Ref ECCSigningKey01
        - KMSEncryptPolicy:
            KeyId: !Ref ECCSigningKey02
        - KMSEncryptPolicy:
            KeyId: !Ref ECCSigningKey03
        - KMSEncryptPolicy:
            KeyId: !Ref ECCSigningKey04
      Events:
        NewMessageEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageEventsQueue.Arn
            BatchSize: 5
            Enabled: true
  
  MessagesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: guid
        Type: String
      TableName: !Sub 'messages-${Environment}'
      Tags:
        project: my-project
        environment: !Ref Environment
      SSESpecification:
        SSEEnabled: true

  ECCSigningKey01:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: ECC asymmetric KMS key for signing and verification
      KeySpec: ECC_SECG_P256K1 
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: 2012-10-17
        Id: kms-ecc-key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::666449929814:user/admin'
            Action: 'kms:*'
            Resource: '*'

  ECCSigningKeyAlias01:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/ecc-signing-key-01'
      TargetKeyId: !Ref ECCSigningKey01

  ECCSigningKey02:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: ECC asymmetric KMS key for signing and verification
      KeySpec: ECC_SECG_P256K1 
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: 2012-10-17
        Id: kms-ecc-key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::666449929814:user/admin'
            Action: 'kms:*'
            Resource: '*'

  ECCSigningKeyAlias02:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/ecc-signing-key-02'
      TargetKeyId: !Ref ECCSigningKey02


  ECCSigningKey03:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: ECC asymmetric KMS key for signing and verification
      KeySpec: ECC_SECG_P256K1 
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: 2012-10-17
        Id: kms-ecc-key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::666449929814:user/admin'
            Action: 'kms:*'
            Resource: '*'

  ECCSigningKeyAlias01:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/ecc-signing-key-03'
      TargetKeyId: !Ref ECCSigningKey03 


  ECCSigningKey04:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: ECC asymmetric KMS key for signing and verification
      KeySpec: ECC_SECG_P256K1 
      KeyUsage: SIGN_VERIFY
      KeyPolicy:
        Version: 2012-10-17
        Id: kms-ecc-key-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: 'arn:aws:iam::666449929814:user/admin'
            Action: 'kms:*'
            Resource: '*'

  ECCSigningKeyAlias04:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/ecc-signing-key-04'
      TargetKeyId: !Ref ECCSigningKey04                 

    
Outputs:
  MessageEventsQueueUrl:
    Description: SQS queue url for new message events to be left in
    Value: !Ref MessageEventsQueue
  MessageEventsQueueArn:
    Description: SQS queue ARN for new message events to be left in
    Value: !GetAtt MessageEventsQueue.Arn
  PutMessageFunctionArn:
    Description: "Put message function ARN"
    Value: !GetAtt PutMessageFunction.Arn
  PutMessageFunctionIamRole:
    Description: "IAM Role for Put Message function"
    Value: !GetAtt PutMessageFunctionRole.Arn
  MessagesTable:
    Description: DynamoDB table where messages are stored
    Value: !Ref MessagesTable
  ECCSigningKey01:
    Description: ECC asymmetric KMS key for signing and verification
    Value: !Ref ECCSigningKey01
  ECCSigningKey02:
    Description: ECC asymmetric KMS key for signing and verification
    Value: !Ref ECCSigningKey02
  ECCSigningKey03:
    Description: ECC asymmetric KMS key for signing and verification
    Value: !Ref ECCSigningKey03
  ECCSigningKey04:
    Description: ECC asymmetric KMS key for signing and verification
    Value: !Ref ECCSigningKey04
