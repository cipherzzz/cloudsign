AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Environment:
    Type: String
    Description: Environment to deploy resources to
    AllowedValues:
      - staging
      - production

Conditions:
  IsProduction: !Equals [ !Ref Environment, production ]

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 5

Resources:
  MessageEventsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'message-events-${Environment}'
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: project
          Value: my-project
        - Key: environment
          Value: !Ref Environment
  
  PutMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'messages-${Environment}'
      CodeUri: ./src/messages/
      Handler: index.handler
      AutoPublishAlias: !Ref Environment
      # DeploymentPreference:
      #   Type: !If [IsProduction, Canary10Percent5Minutes, AllAtOnce]
      #   Alarms:
      #     - !Ref AliasErrorMetricGreaterThanZeroAlarm
      #   Hooks:
      #     PreTraffic: !Ref PreTrafficCheckFunction      
      Environment:
        Variables:
          TABLE: !Ref MessagesTable
      Tags:
        project: my-project
        environment: !Ref Environment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - SQSPollerPolicy:
            QueueName: !Ref MessageEventsQueue
      Events:
        NewMessageEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageEventsQueue.Arn
            BatchSize: 5
            Enabled: true
  
  MessagesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: guid
        Type: String
      TableName: !Sub 'messages-${Environment}'
      Tags:
        project: my-project
        environment: !Ref Environment
      SSESpecification:
        SSEEnabled: true

  # PreTrafficCheckFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub 'CodeDeployHook_put-message-${Environment}-pre-traffic-check'
  #     CodeUri: ./src/pre-traffic-check/
  #     Handler: index.handler
  #     Environment:
  #       Variables:
  #         TABLE: !Ref MessagesTable
  #         FN_NEW_VERSION: !Ref PutMessageFunction.Version
  #     Tags:
  #       project: my-project
  #       environment: !Ref Environment
  #     Policies:
  #       - DynamoDBCrudPolicy:
  #           TableName: !Ref MessagesTable
  #       - Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #             - codedeploy:PutLifecycleEventHookExecutionStatus
  #           Resource:
  #             !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
  #       - Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #             - lambda:InvokeFunction
  #           Resource: !Ref PutMessageFunction.Version

  # AliasErrorMetricGreaterThanZeroAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmDescription: Lambda Function Error > 0
  #     ComparisonOperator: GreaterThanThreshold
  #     Dimensions:
  #       - Name: Resource
  #         Value: !Sub '${PutMessageFunction}:${Environment}'
  #       - Name: FunctionName
  #         Value: !Ref PutMessageFunction
  #     EvaluationPeriods: 2
  #     MetricName: Errors
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 0

Outputs:
  MessageEventsQueueUrl:
    Description: SQS queue url for new message events to be left in
    Value: !Ref MessageEventsQueue
  MessageEventsQueueArn:
    Description: SQS queue ARN for new message events to be left in
    Value: !GetAtt MessageEventsQueue.Arn
  PutMessageFunctionArn:
    Description: "Put message function ARN"
    Value: !GetAtt PutMessageFunction.Arn
  PutMessageFunctionIamRole:
    Description: "IAM Role for Put Message function"
    Value: !GetAtt PutMessageFunctionRole.Arn
  MessagesTable:
    Description: DynamoDB table where messages are stored
    Value: !Ref MessagesTable
  # PreTrafficCheckFunctionArn:
  #   Description: "Pre Traffic check function function ARN"
  #   Value: !GetAtt PreTrafficCheckFunction.Arn
  # PreTrafficCheckFunctionIamRole:
  #   Description: "IAM Role for Put Message Pre Traffic Check function"
  #   Value: !GetAtt PreTrafficCheckFunctionRole.Arn
